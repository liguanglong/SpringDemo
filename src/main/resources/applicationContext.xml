<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:beans="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
       <!--xmlns:context="http://www.springframework.org/schema/context"-->
       <!--xmlns:aop="http://www.springframework.org/schema/aop"-->
       <!--xmlns:tx="http://www.springframework.org/schema/tx"-->
       <!--xsi:schemaLocation="http://www.springframework.org/schema/beans-->
    <!--http://www.springframework.org/schema/beans/spring-beans.xsd-->
    <!--http://www.springframework.org/schema/context-->
    <!--http://www.springframework.org/schema/context/spring-context.xsd-->
    <!--http://www.springframework.org/schema/aop-->
    <!--http://www.springframework.org/schema/aop/spring-aop.xsd-->
    <!--http://www.springframework.org/schema/tx-->
    <!--http://www.springframework.org/schema/tx/spring-tx.xsd">-->






    <!-- 引入数据库配置文件 -->
    <bean id="dbProperties" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"></property>
    </bean>

    <!--设置数据源-->
    <bean id="dataSource" destroy-method="close"
          class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${driver}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="${maxActive}"></property>-->
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${maxWait}"></property>-->
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 给映射的类配置别名 -->
        <!-- 默认的别名是model类的首字母小写 -->
        <!-- 如：UserXxx实体类。别名为：userXxx-->
        <property name="typeAliasesPackage" value="com.example.pojo"/>

        <!-- 自动扫描mybatis的mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mybatis-mapper/*.xml"></property>
    </bean>

    <!--这个会自动创建DaoImpl对应的Dao-->
    <!--如果mapper中的namespace对应的是实体类的全路径名，那么需要手动实现daoImpl，并且指定@Repository("userDao")-->
    <!--如果mapper中的namespace对应的是dao的全路径名，那么不需要手动实现daoImpl，mybaits自动实现了daoImpl的功能，直接引用dao即可完成功能，
    但mapper中的方法id要与dao中的方法名保持一致，不然对应不起来-->

    <!--&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.example.dao"/>-->
        <!--&lt;!&ndash;<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>&ndash;&gt;-->
    <!--</bean>-->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>




    <!--aop自动代理-->
    <aop:aspectj-autoproxy/>

    <bean name="myAspect" class="com.example.aspect.MyAspect"/>

    <!--开启spring提供的基于注解的声明式事务管理，使具有@Transactional 注解的bean自动配置为声明式事务支持。-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!-- 配置事务属性，传播特性，隔离级别 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 指定具体需要拦截的方法 -->
        <tx:attributes>
            <!-- 拦截do开头，save开头的方法，事务传播行为是required 隔离级别为default -->
            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" />
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" />
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" />
            <!-- 除上述定义之外的方法，事务属性为只读  -->
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>


    <!-- 配置切入点 -->
    <aop:config>
        <!-- 切入点，拦截*service接口及其实现类 -->
        <aop:pointcut expression="execution(* com.example.service.*Service.*(..))"
                      id="serviceMethod" />
        <!--<aop:pointcut expression="execution(* com.example.service.UserService.*(..))"-->
                      <!--id="serviceMethod" />-->
        <!-- 切入点通知 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
    </aop:config>



    <!-- 设置自动扫描 -->

    <context:component-scan base-package="com.example"></context:component-scan>






</beans>